name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt-version: ['6.5.0']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
      shell: bash
      
    - name: Cache Qt
      uses: actions/cache@v3
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        cached: true
        modules: 'qtbase qttools qtdeclarative'
        
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libxkbcommon-x11-0 libxcb-xinerama0
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake create-dmg
        
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Build Release
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$Qt6_DIR
        cmake --build . --config Release
        
    - name: Create Linux AppImage
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        mkdir -p appdir/usr/bin
        mkdir -p appdir/usr/lib
        mkdir -p appdir/usr/share/applications
        mkdir -p appdir/usr/share/icons/hicolor/256x256/apps
        
        # Copy executable
        cp TicTacToe appdir/usr/bin/
        
        # Copy Qt libraries
        ldd TicTacToe | grep "=> /" | awk '{print $3}' | grep -v "^/lib\|^/usr/lib" | xargs -I '{}' cp -v '{}' appdir/usr/lib/
        
        # Create desktop file
        cat > appdir/usr/share/applications/tictactoe.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Advanced Tic Tac Toe
        Exec=TicTacToe
        Icon=tictactoe
        Comment=Advanced Tic Tac Toe Game with AI
        Categories=Game;
        EOF
        
        # Download AppImage tool
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Create AppImage
        ./appimagetool-x86_64.AppImage appdir TicTacToe-${{ steps.get_version.outputs.VERSION }}-x86_64.AppImage
        
    - name: Create Windows Installer
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        mkdir installer
        copy Release\TicTacToe.exe installer\
        
        # Copy Qt DLLs
        windeployqt installer\TicTacToe.exe
        
        # Create NSIS installer script
        echo 'OutFile "TicTacToe-${{ steps.get_version.outputs.VERSION }}-Setup.exe"' > installer.nsi
        echo 'InstallDir "$PROGRAMFILES\TicTacToe"' >> installer.nsi
        echo 'Section "MainSection" SEC01' >> installer.nsi
        echo '  SetOutPath "$INSTDIR"' >> installer.nsi
        echo '  File /r "installer\*"' >> installer.nsi
        echo '  CreateShortcut "$DESKTOP\TicTacToe.lnk" "$INSTDIR\TicTacToe.exe"' >> installer.nsi
        echo 'SectionEnd' >> installer.nsi
        
        # Create portable zip
        powershell Compress-Archive -Path installer\* -DestinationPath TicTacToe-${{ steps.get_version.outputs.VERSION }}-Windows-Portable.zip
        
    - name: Create macOS DMG
      if: matrix.os == 'macos-latest'
      run: |
        cd build
        mkdir -p TicTacToe.app/Contents/MacOS
        mkdir -p TicTacToe.app/Contents/Resources
        
        # Copy executable
        cp TicTacToe TicTacToe.app/Contents/MacOS/
        
        # Create Info.plist
        cat > TicTacToe.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>TicTacToe</string>
            <key>CFBundleIdentifier</key>
            <string>com.yourcompany.tictactoe</string>
            <key>CFBundleName</key>
            <string>Advanced Tic Tac Toe</string>
            <key>CFBundleVersion</key>
            <string>${{ steps.get_version.outputs.VERSION }}</string>
        </dict>
        </plist>
        EOF
        
        # Use macdeployqt to bundle Qt frameworks
        macdeployqt TicTacToe.app
        
        # Create DMG
        create-dmg \
          --volname "Advanced Tic Tac Toe" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "TicTacToe.app" 175 120 \
          --hide-extension "TicTacToe.app" \
          --app-drop-link 425 120 \
          "TicTacToe-${{ steps.get_version.outputs.VERSION }}-macOS.dmg" \
          "TicTacToe.app"
          
    - name: Upload Release Assets
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.os }}-${{ steps.get_version.outputs.VERSION }}
        path: |
          build/TicTacToe-*.AppImage
          build/TicTacToe-*.exe
          build/TicTacToe-*.zip
          build/TicTacToe-*.dmg
        retention-days: 90
        
  create-release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./release-assets
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## Advanced Tic Tac Toe ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Features:" >> $GITHUB_OUTPUT
        echo "- Player vs Player mode" >> $GITHUB_OUTPUT
        echo "- Player vs AI mode with Minimax algorithm" >> $GITHUB_OUTPUT
        echo "- User authentication and registration" >> $GITHUB_OUTPUT
        echo "- Game history tracking and replay" >> $GITHUB_OUTPUT
        echo "- Cross-platform support (Windows, macOS, Linux)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Downloads:" >> $GITHUB_OUTPUT
        echo "- **Windows**: TicTacToe-Setup.exe or TicTacToe-Windows-Portable.zip" >> $GITHUB_OUTPUT
        echo "- **macOS**: TicTacToe-macOS.dmg" >> $GITHUB_OUTPUT
        echo "- **Linux**: TicTacToe-x86_64.AppImage" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Installation:" >> $GITHUB_OUTPUT
        echo "- Windows: Run the .exe installer or extract the portable zip" >> $GITHUB_OUTPUT
        echo "- macOS: Mount the .dmg and drag to Applications folder" >> $GITHUB_OUTPUT
        echo "- Linux: Make the .AppImage executable and run: \`chmod +x TicTacToe-*.AppImage && ./TicTacToe-*.AppImage\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Advanced Tic Tac Toe ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        files: |
          release-assets/**/*.AppImage
          release-assets/**/*.exe
          release-assets/**/*.zip
          release-assets/**/*.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
